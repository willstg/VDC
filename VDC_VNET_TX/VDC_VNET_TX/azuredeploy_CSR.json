{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "centralus",
      "metadata": {
        "description": "Deployment location. (example: West US)"
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "vnet_vdc_tx",
      "metadata": {
        "description": "AzureFoundation VNET for Virtual Data Center"
      }
    },
    "ResourceGroupName": {
      "type": "string",
      "defaultValue": "vdc_vnet_tx"
    },

    "adminUsername": {
      "defaultValue": "",
      "type": "String",
      "metadata": {
        "description": "Username for the Virtual Machine. If sshPublicKey is used, username need to be :azureuser"
      }
    },
    "adminPassword": {
      "defaultValue": "",
      "type": "SecureString",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "authenticationType": {
      "defaultValue": "password",
      "allowedValues": [
        "password"
      ],
      "type": "String",
      "metadata": {
        "description": "Authentication Type to chose for the Virtual Machines, If sshPublicKey is used, AminUsername need to be: azureuser"
      }
    },
    "csr1aName": {
      "type": "string",
      "defaultValue": "vdcpccsr1a",
      "metadata": { "description": "The name of the primary Router" }
    },

    "csr1aPIPName": {
      "type": "string",
      "defaultvalue": "700_CSR1a",
      "metadata": { "description": "PublicIP Address Name" }
    },
    "VNETPremiumStorageName": {
      "type": "string",
      "defaultValue": "vdcvnettx2a",
      "metadata": {
        "description": "Premium Storage account name"
      }
    },
    "VNETStorageName": {
      "type": "string",
      "defaultvalue": "vdcvnettx1a",
      "metadata": {
        "description": "Storage account name"
      }
    },

    "baseUrl": {
      "defaultValue": "https://github.com/telmosampaio/azure-templates/blob/master/IaaS-NSG-UDR/",
      "type": "string",
      "metadata": {
        "artifactsBaseUrl": "",
        "description": "URL to acquire other templates"
      }
    },
    "vmSize": {
      "defaultValue": "Standard_D3_v2",
      "allowedValues": [
        "Standard_D3_v2"
      ],
      "type": "string",
      "metadata": {
        "description": "Size of the Virtual Machine"
      }
    },
    "subnet700Name": {
      "type": "string",
      "defaultValue": "CSR_In_700_VDC_prod_tx",
      "metadata": {
        "description": "Subnet for CSR for Inside interface"
      }
    },
    "subnet700csr1aIP": {
      "type": "string",
      "defaultValue": "10.190.0.4",
      "metadata": { "description": "NIC0 IP Address internal" }
    },

    "subnet701Name": {
      "type": "string",
      "defaultValue": "CSR_Out_701_VDC_prod_tx",
      "metadata": {
        "description": "Subnet for CSR Outside"
      }
    },
      "subnet701csr1aIP": {
        "type": "string",
        "defaultValue": "10.190.0.12",
        "metadata": { "description": "NIC1 IP Address internal" }

      },
      "subnet702Name": {
        "type": "string",
        "defaultValue": "CSR_Tunnel_702_VDC_prod_tx",
        "metadata": {
          "description": "Subnet for the CSR Tunnel"
        }
      },
      "subnet702csr1aIP": {
        "type": "string",
        "defaultValue": "10.190.0.20",
        "metadata": { "description": "NIC2 IP Address internal" }

      },

      "subnet703Name": {
        "type": "string",
        "defaultValue": "CSR_HA_703_VDC_prod_tx",
        "metadata": {
          "description": "Failover subnet"
        }
      },
      "subnet703csr1aIP": {
        "type": "string",
        "defaultValue": "10.190.0.28",
        "metadata": { "description": "NIC3 IP Address internal" }

      }
    },

  "variables": {
    "imagePublisher": "cisco",
    "imageOffer": "cisco-csr-1000v",
    "imageSKU": "csr-azure-byol",
    "OSDiskName": "[concat(parameters('csr1aName'), '-disk')]",
    "vmStorageAccountContainerName": "vhds",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
    "subnet1Ref": "[concat(variables('vnetID'),'/subnets/', parameters('Subnet700Name'))]",
    "subnet2Ref": "[concat(variables('vnetID'),'/subnets/', parameters('Subnet701Name'))]",
    "subnet3Ref": "[concat(variables('vnetID'),'/subnets/', parameters('Subnet702Name'))]",
    "subnet4Ref": "[concat(variables('vnetID'),'/subnets/', parameters('Subnet703Name'))]",
    "csr1aPIP": "[parameters('csr1aPIPName')]",
    "apiVer": "2015-06-15",
    "osProfilepassword": {
      "computername": "[parameters('csr1aName')]",
      "adminUsername": "[parameters('adminUsername')]",
      "adminPassword": "[parameters('adminPassword')]"
    }
  },
  "resources": [

    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('csr1aName'),'-Nic0')]",
      "apiVersion": "[variables('apiVer')]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "NIC0",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[parameters('subnet700csr1aIP')]",
              "subnet": {
                "id": "[variables('vnetID')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('csr1aPIP').pipName)]"
              }
            }
          }
        ],
        "enableIPForwarding": true
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('csr1aName'),'-Nic1')]",
      "apiVersion": "[variables('apiVer')]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "NIC1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[parameters('subnet701csr1aIP')]",
              "subnet": {
                "id": "[variables('vnetID')]"
              }

            }
          }
        ],
        "enableIPForwarding": true
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('csr1aName'),'-Nic2')]",
      "apiVersion": "[variables('apiVer')]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "NIC2",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[parameters('subnet702csr1aIP')]",
              "subnet": {
                "id": "[variables('vnetID')]"
              }

            }
          }
        ],
        "enableIPForwarding": true
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('csr1aName'),'-Nic3')]",
      "apiVersion": "[variables('apiVer')]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "NIC3",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[parameters('subnet703csr1aIP')]",
              "subnet": {
                "id": "[variables('vnetID')]"
              }
            }
          }
        ],
        "enableIPForwarding": true
      }
    },
   
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('csr1aName')]",
      "apiVersion": "[variables('apiVer')]",
      "location": "[parameters('location')]",
      "plan": {
        "name": "csr-azure-byol",
        "publisher": "cisco",
        "product": "cisco-csr-1000v"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
     
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('imageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(parameters('csr1aName'),'-osDisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "vhd": {
              "uri": "[concat('http://',parameters('VNETStorageName'),'.blob.core.windows.net/vhds/', variables('OSDiskName'), '-', uniquestring(resourceGroup().id), '.vhd')]"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "properties": {
                "primary": true
              },
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('csr1aName'),'-Nic0'))]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('csr1aName'),'-Nic1'))]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('csr1aName'),'-Nic2'))]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('csr1aName'),'-Nic3'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat('http://',parameters('VNETStorageName'),'.blob.core.windows.net')]"
          }
        }
      },
      "dependsOn": [
           "[concat('Microsoft.Network/networkInterfaces/',parameters('csr1aName'),'-Nic0')]",
        "[concat('Microsoft.Network/networkInterfaces/',parameters('csr1aName'),'-Nic1')]",
        "[concat('Microsoft.Network/networkInterfaces/',parameters('csr1aName'),'-Nic2')]",
        "[concat('Microsoft.Network/networkInterfaces/',parameters('csr1aName'),'-Nic3')]"
      ]
    }
  ]
}